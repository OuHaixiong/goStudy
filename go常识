标识符用来命名变量、类型等程序实体。一个标识符实际上就是一个或是多个字母(A~Z和a~z)数字(0~9)、下划线_组成的序列，但是第一个字符必须是字母或下划线而不能是数字
当标识符（包括常量、变量、类型、函数名、结构字段等等）以一个大写字母开头，如：Group1，那么使用这种形式的标识符的对象就可以被外部包的代码所使用（客户端程序需要先导入这个包），
这被称为导出（像面向对象语言中的 public）；标识符如果以小写字母开头，则对包外是不可见的，但是他们在整个包的内部是可见并且可用的（像面向对象语言中的 private ）

下面列举了 Go 代码中会使用到的 25 个关键字或保留字：
break   default func    interface   select
case    defer   go  map struct
chan    else    goto    package switch
const   fallthrough if  range   type
continue    for import  return  var

除了以上介绍的这些关键字，Go 语言还有 36 个预定义标识符：
append  bool    byte    cap     close   complex     complex64   complex128  uint16
copy    false   float32     float64     imag    int     int8    int16   uint32
int32   int64   iota    len     make    new     nil     panic   uint64
print   println     real    recover     string  true    uint    uint8   uintptr

派生类型:（数据类型）
包括：

    (a) 指针类型（Pointer）
    (b) 数组类型
    (c) 结构化类型(struct)
    (d) 联合体类型 (union)
    (e) 函数类型
    (f) 切片类型
    (g) 接口类型（interface）
    (h) Map 类型
    (i) Channel 类型

uint8  ： 无符号 8 位整型 (0 到 255)
uint16 ： 无符号 16 位整型 (0 到 65535)
uint32 ： 无符号 32 位整型 (0 到 4294967295)
uint64 ： 无符号 64 位整型 (0 到 18446744073709551615)
int8   ： 有符号 8 位整型 (-128 到 127)
int16  ： 有符号 16 位整型 (-32768 到 32767)
int32  ： 有符号 32 位整型 (-2147483648 到 2147483647)
int64  ： 有符号 64 位整型 (-9223372036854775808 到 9223372036854775807)

float32    ： IEEE-754 32位浮点型数
float64    ： IEEE-754 64位浮点型数
complex64  ： 32 位实数和虚数
complex128 ： 64 位实数和虚数

其他数字类型：
byte      ： 类似 uint8
rune      ： 类似 int32
uint      ： 32 或 64 位
int       ： 与 uint 一样大小
uintptr   ： 无符号整型，用于存放一个指针






























